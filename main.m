clear all;
%reading data
delimiterIn = ' ';
headerlinesIn = 1;
data_training = importdata('B1_training.txt',delimiterIn,headerlinesIn);
labels_training=data_training.textdata(2:end,1);
for i=1:length(labels_training)
    temp=labels_training{i,1};
    labels_training{i,1}=temp(1);
    m00(i,1)=str2num(temp(2:end));
end
data_training=[m00,data_training.data];


data_testing = importdata('B1_testing.txt',delimiterIn,headerlinesIn);
labels_testing=data_testing.textdata(2:end,1);
for i=1:length(labels_training)
    temp=labels_testing{i,1};
    labels_testing{i,1}=temp(1);
    m00(i,1)=str2num(temp(2:end));
end
data_testing=[m00,data_testing.data];
%%
%function [w,mov] = somdemo(shapefun, niter, seed)
% SOMDEMO(SHAPEFUN, NITER, [SEED])
% function to demonstrate the SOM learning function with a 2D or 3D grid of
% output nodes and typical learning parameters

% grid size
N = 5;
niter=200;

% learning parameters

MU_I        = 0.5;          % learning rate: initial
MU_F        = 0.1;          %              : final

SIGMA_I     =  3.0e0;       % attraction between points : initial
SIGMA_F     =  1.0e-1;      %                           : final

% points to learn, generated by shape function
d = size(data_training,2);

[grid(:,1), grid(:,2), grid(:,3), grid(:,4), grid(:,5), grid(:,6), grid(:,7), grid(:,8)] = ...
    ind2sub([N N N N N N N N], 1:N^d);

% create random initial weights
W = rand(N^d, d);

% clear previous plot
clf

% run SOM learning for specified number of steps
for t = 1:niter
    W = somlearn(W, grid, data_training, D0, L0, lambda_D, lambda_L, t);
end

